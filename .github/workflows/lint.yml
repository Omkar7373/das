name: Test_Pylint and Pytest Test on client

on:
  # workflow_call:
  #   inputs:
  #     testname:
  #       type: string
  #       required: true
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  lint:
    name: Pylint and Pytest Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |  
          uv sync

      - name: Install pylint and pytest
        run: |
          uv pip install pylint pytest

      # - name: Run Pytest
      #   run: |
      #     uv run pytest tests/
 
      # - name: Run Pylint
      #   run: |
      #     files=$(git diff --name-status ${{ github.event.before }} ${{ github.sha }} -- 'src/' | grep -E '^[AM]' | awk '{print $2}' | grep '\.py$' || true)
      #     if [ -n "$files" ]; then
      #       files=$(echo "$files" | tr '\n' ' ')
      #       uv run pylint $files
      #     else
      #       echo "No Python files changed."
      #     fi
      # - name: Run Pylint 
      #   run: |
      #     git fetch origin main
      #     files=$(git diff --name-only origin/main...HEAD | grep '^src/.*\.py$' || true)
      #     if [ -n "$files" ]; then
      #       files=$(echo "$files" | tr '\n' ' ')
      #       uv run pylint $files
      #     else
      #       echo "No Python files changed."
      #     fi
      # - name: Run Pytest
      #   if: github.event_name == 'pull_request'
      #   continue-on-error: true
      #   run: |
      #     files=$(git diff --name-status origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '^[AM]' | awk '{print $2}' | grep '^tests/.*\.py$' || true)

      #     if [ -n "$files" ]; then
      #       files=$(echo "$files" | tr '\n' ' ')
      #       uv run pytest $files
      #     else
      #       echo "No Python files added or modified."
      #     fi

      # - name: Run Pylint
      #   if: github.event_name == 'pull_request'
      #   continue-on-error: true
      #   run: |
      #     files=$(git diff --name-status origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '^[AM]' | awk '{print $2}' | grep '^src/.*\.py$' || true)

      #     if [ -n "$files" ]; then
      #       files=$(echo "$files" | tr '\n' ' ')
      #       uv run pylint $files
      #     else
      #       echo "No Python files added or modified."
      #     fi

      - name: Run Pytest and capture pass percentage
        id: pytest_step
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          files=$(git diff --name-status origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '^[AM]' | awk '{print $2}' | grep '^tests/.*\.py$' || true)
          if [ -n "$files" ]; then
            files=$(echo "$files" | tr '\n' ' ')
            # Run pytest and capture summary
            pytest_output=$(uv run pytest $files --tb=short 2>&1)
            echo "$pytest_output"
            total=$(echo "$pytest_output" | grep -oP '(?<=collected )\d+(?= items)')
            failed=$(echo "$pytest_output" | grep -oP '(?<=, )\d+(?= failed)' || echo 0)
            passed=$((total - failed))
            if [ -z "$total" ] || [ "$total" -eq 0 ]; then
              pass_percent=0
            else
              pass_percent=$((passed * 100 / total))
            fi
          else
            echo "No test files added or modified."
            pass_percent=100
          fi
          echo "pytest_pass_percent=$pass_percent" >> $GITHUB_OUTPUT

      - name: Run Pylint and capture score percentage
        id: pylint_step
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          files=$(git diff --name-status origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '^[AM]' | awk '{print $2}' | grep '^src/.*\.py$' || true)
          if [ -n "$files" ]; then
            files=$(echo "$files" | tr '\n' ' ')
            pylint_output=$(uv run pylint $files 2>&1)
            echo "$pylint_output"
            score_line=$(echo "$pylint_output" | grep 'Your code has been rated at')
            score=$(echo "$score_line" | grep -oP '\d+(\.\d+)?')
            if [ -z "$score" ]; then
              score=0
            fi
            score=$(awk "BEGIN {printf \"%.0f\", $score * 10}")  # convert out of 10 to %
          else
            echo "No Python files added or modified."
            score=100
          fi
          echo "pylint_score_percent=$score" >> $GITHUB_OUTPUT

      - name: Check thresholds and fail if below 80%
        run: |
          pytest_percent=${{ steps.pytest_step.outputs.pytest_pass_percent }}
          pylint_percent=${{ steps.pylint_step.outputs.pylint_score_percent }}

          echo "Pytest pass percentage: $pytest_percent%"
          echo "Pylint score percentage: $pylint_percent%"

          if [ "$pytest_percent" -lt 80 ]; then
            echo "Pytest pass percentage ($pytest_percent%) is below 80%. Failing the job."
            exit 1
          fi

          if [ "$pylint_percent" -lt 80 ]; then
            echo "Pylint score percentage ($pylint_percent%) is below 80%. Failing the job."
            exit 1
          fi

          echo "Both Pytest and Pylint passed 80% threshold. Proceeding."
